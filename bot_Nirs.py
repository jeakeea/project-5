import os
import json
import logging
import requests
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.request import HTTPXRequest

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("No TELEGRAM_BOT_TOKEN found in environment variables")

# Supabase REST API headers
headers = {
    'apikey': SUPABASE_KEY,
    'Authorization': f'Bearer {SUPABASE_KEY}',
    'Content-Type': 'application/json',
    'Prefer': 'return=representation'
}

# Dictionary for translating days of the week
WEEKDAYS = {
    'monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
    'wednesday': '–°—Ä–µ–¥–∞',
    'thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
    'friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    'saturday': '–°—É–±–±–æ—Ç–∞',
    'sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}

# Dictionary for weekday numbers (0 = Monday, 6 = Sunday)
WEEKDAY_NUMBERS = {
    0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    1: '–í—Ç–æ—Ä–Ω–∏–∫',
    2: '–°—Ä–µ–¥–∞',
    3: '–ß–µ—Ç–≤–µ—Ä–≥',
    4: '–ü—è—Ç–Ω–∏—Ü–∞',
    5: '–°—É–±–±–æ—Ç–∞',
    6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}

# Reverse mapping for weekdays (Russian to English)
WEEKDAYS_REVERSE = {v: k for k, v in WEEKDAYS.items()}


def fetch_advisors(search_query=None):
    """Fetch advisors from Supabase using REST API."""
    try:
        url = f"{SUPABASE_URL}/rest/v1/scientific_advisors"

        # Add search query if provided - search by both last_name and research_field
        if search_query:
            url += f"?or=(last_name.ilike.*{search_query}*,research_field.ilike.*{search_query}*)"

        logger.info(f"Fetching advisors from URL: {url}")
        logger.info(f"Using SUPABASE_URL: {SUPABASE_URL}")
        logger.info(f"Using SUPABASE_KEY: {'set' if SUPABASE_KEY else 'not set'}")
        logger.info(f"Using headers: {headers}")

        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()

        advisors = response.json()
        logger.info(f"Received {len(advisors)} advisors from database")
        return advisors
    except requests.exceptions.Timeout:
        logger.error("Timeout while fetching advisors from Supabase")
        return None
    except Exception as e:
        logger.error(f"Error fetching advisors: {str(e)}", exc_info=True)
        return None


def get_unique_research_fields():
    """Get list of unique research fields from advisors."""
    try:
        advisors = fetch_advisors()
        if advisors:
            fields = set(advisor['research_field'] for advisor in advisors)
            return sorted(list(fields))
        return []
    except Exception as e:
        logger.error(f"Error getting research fields: {str(e)}", exc_info=True)
        return []


def format_date(date_str):
    """Convert date string from '2025-04-01' to '1 –∞–ø—Ä–µ–ª—è 2025'"""
    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
    months = {
        1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
        5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
        9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
    }
    return f"{date_obj.day} {months[date_obj.month]} {date_obj.year}"


def get_weekday(date_str):
    """Get weekday name for a given date."""
    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
    return WEEKDAY_NUMBERS[date_obj.weekday()]


def get_consultation_days(office_hours):
    """Get list of weekdays when advisor has consultations."""
    consultation_days = []
    for day, _ in office_hours.items():
        day_ru = WEEKDAYS.get(day.lower(), day)
        consultation_days.append(day_ru)
    return consultation_days


def filter_available_days(days, year, month, consultation_days):
    """Filter available days to only include advisor's consultation days."""
    filtered_days = []
    for day in days:
        date_str = f"{year}-{month:02d}-{day:02d}"
        weekday = get_weekday(date_str)
        if weekday in consultation_days:
            filtered_days.append(day)
    return filtered_days


def format_calendar(calendar_data, advisor):
    """Format calendar data for display."""
    if not calendar_data:
        return "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"

    current_month = datetime.now().strftime("%Y-%m")
    month_data = calendar_data.get(current_month, {})

    if not month_data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"

    # Parse year and month from current_month
    year, month = map(int, current_month.split('-'))

    # Get advisor's consultation days
    consultation_days = get_consultation_days(advisor['office_hours'])

    available_days = month_data.get('available_days', [])
    # Filter available days to only include advisor's consultation days
    filtered_days = filter_available_days(available_days, year, month, consultation_days)

    busy_slots = month_data.get('busy_slots', {})

    # Get month name in Russian
    months = {
        1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–µ–ª—å',
        5: '–ú–∞–π', 6: '–ò—é–Ω—å', 7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç',
        9: '–°–µ–Ω—Ç—è–±—Ä—å', 10: '–û–∫—Ç—è–±—Ä—å', 11: '–ù–æ—è–±—Ä—å', 12: '–î–µ–∫–∞–±—Ä—å'
    }
    month_name = months[month]

    result = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {month_name} {year}:\n\n"
    result += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏: " + ", ".join(str(day) for day in sorted(filtered_days)) + "\n\n"
    result += "–ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã:\n"

    # Filter and sort busy slots
    filtered_busy_slots = {}
    for date, slots in busy_slots.items():
        weekday = get_weekday(date)
        if weekday in consultation_days:
            filtered_busy_slots[date] = slots

    # Sort dates and format them
    for date in sorted(filtered_busy_slots.keys()):
        slots = filtered_busy_slots[date]
        formatted_date = format_date(date)
        result += f"{formatted_date}: {', '.join(slots)}\n"

    return result


def format_advisor_basic_info(advisor):
    """Format basic advisor information into a message."""
    message = f"üë§ *{advisor['last_name']}*\n"
    message += f"üìö –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {advisor['research_field']}\n"
    message += f"üìß Email: {advisor['email']}\n"
    message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {advisor['phone']}\n"
    message += f"üë• –õ–∏–º–∏—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n"
    message += f"   - –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç: {advisor['bachelors_limit']}\n"
    message += f"   - –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞: {advisor['masters_limit']}\n"
    message += f"   - –ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞: {advisor['phd_limit']}\n"
    message += "üïí –ß–∞—Å—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n"
    for day, hours in advisor['office_hours'].items():
        # Translate day name to Russian
        day_ru = WEEKDAYS.get(day.lower(), day)
        message += f"   - {day_ru}: {hours}\n"
    return message


def format_advisor_schedule(advisor):
    """Format advisor schedule information."""
    message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è *{advisor['last_name']}*:\n\n"
    message += format_calendar(advisor.get('calendar', {}), advisor)
    return message


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    logger.info(f"Start command received from user {update.effective_user.id}")
    keyboard = [
        [InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π", callback_data='list_advisors')],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data='search_field')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞—É—á–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π!\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )


async def list_advisors(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show list of research fields when list_advisors is selected."""
    logger.info("Showing research fields list")
    fields = get_unique_research_fields()

    if not fields:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π."
        )
        return

    keyboard = []
    for i, field in enumerate(fields):
        # Use index as callback_data to keep it short
        keyboard.append([InlineKeyboardButton(
            f"üìö {field}",
            callback_data=f'f_{i}'
        )])
        # Store the field name in context for later use
        if 'fields' not in context.user_data:
            context.user_data['fields'] = {}
        context.user_data['fields'][str(i)] = field

    # Add back button
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π:",
        reply_markup=reply_markup
    )


async def show_advisors_by_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show advisors for selected research field."""
    query = update.callback_query
    field_id = query.data.split('_')[1]  # Get field index from callback_data

    if 'fields' not in context.user_data or field_id not in context.user_data['fields']:
        await query.answer()
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return

    field = context.user_data['fields'][field_id]
    advisors = fetch_advisors(field)

    if advisors is None or not advisors:
        await query.answer()
        await query.message.reply_text(
            f"–ù–∞—É—á–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é '{field}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        )
        return

    await query.answer()
    await query.message.reply_text(
        f"üìã –°–ø–∏—Å–æ–∫ –Ω–∞—É—á–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é '{field}':"
    )

    for advisor in advisors:
        keyboard = [
            [InlineKeyboardButton(
                "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                callback_data=f's_{advisor["id"]}'
            )],
            [InlineKeyboardButton(
                "üîô –ö —Å–ø–∏—Å–∫—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π",
                callback_data='list_advisors'
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = format_advisor_basic_info(advisor)
        await query.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )


async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show schedule for a specific advisor."""
    query = update.callback_query
    advisor_id = query.data.split('_')[1]  # Get advisor ID from callback_data

    advisors = fetch_advisors()
    if not advisors:
        await query.answer()
        await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
        return

    advisor = next((a for a in advisors if a['id'] == advisor_id), None)
    if not advisor:
        await query.answer()
        await query.message.reply_text("–ù–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await query.answer()
    message = format_advisor_schedule(advisor)

    # Add back button to return to the advisor's info
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data='list_advisors')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )


async def search_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle advisor search."""
    logger.info(f"Search field request from user {update.effective_user.id}")
    await update.callback_query.answer()

    # Add back button to the search prompt
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=reply_markup
    )
    context.user_data['expecting_search'] = True


async def handle_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process the search query."""
    if not context.user_data.get('expecting_search'):
        return

    search_query = update.message.text
    logger.info(f"Processing search query: {search_query}")

    advisors = fetch_advisors(search_query)

    if advisors is None:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞—É—á–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π."
        )
        return

    if not advisors:
        # Add back button when no results found
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=reply_markup
        )
        return

    await update.message.reply_text(
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:"
    )

    for advisor in advisors:
        keyboard = [
            [InlineKeyboardButton(
                "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                callback_data=f's_{advisor["id"]}'
            )],
            [InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data='back_to_main'
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = format_advisor_basic_info(advisor)
        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    context.user_data['expecting_search'] = False


async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle returning to the main menu."""
    keyboard = [
        [InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π", callback_data='list_advisors')],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data='search_field')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show help information."""
    logger.info(f"Help command requested by user {update.effective_user.id}")
    help_text = """
*–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –Ω–∞—É—á–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
‚Ä¢ –ü–æ–∏—Å–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö –Ω–∞–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤—Å—Ç—Ä–µ—á

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
    """

    # Add back button to help message
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )


def main():
    """Start the bot."""
    logger.info("Starting the bot")
    try:
        # Create custom request object with increased timeout
        request = HTTPXRequest(
            connection_pool_size=8,
            read_timeout=30,
            write_timeout=30,
            connect_timeout=30,
        )

        # Create the Application with custom request
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).request(request).build()

        # Add handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CallbackQueryHandler(list_advisors, pattern='^list_advisors$'))
        application.add_handler(CallbackQueryHandler(search_field, pattern='^search_field$'))
        application.add_handler(CallbackQueryHandler(help_command, pattern='^help$'))
        application.add_handler(CallbackQueryHandler(show_schedule, pattern='^s_.*$'))
        application.add_handler(CallbackQueryHandler(show_advisors_by_field, pattern='^f_.*$'))
        application.add_handler(CallbackQueryHandler(back_to_main, pattern='^back_to_main$'))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search))

        logger.info("Handlers registered successfully")

        # Start the bot with drop_pending_updates=True to avoid duplicate messages
        logger.info("Starting polling...")
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
    except Exception as e:
        logger.error(f"Error starting bot: {str(e)}", exc_info=True)
        raise


if __name__ == '__main__':
    main()